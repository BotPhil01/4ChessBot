/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst BOARDDIMENSION = 14;\nwindow.onload = function () {\n    console.log(\"starting up\");\n    buttons();\n    initBoard();\n};\nfunction buttons() {\n    var h = document.getElementById(\"homeSwap\");\n    if (h) {\n        h.onclick = swap;\n    }\n    var bb = document.getElementById(\"boardBackButton\");\n    if (bb) {\n        bb.onclick = swap;\n    }\n    var db = document.getElementById(\"debugButton\");\n    var draggable = document.getElementById(\"draggable\");\n    if (draggable) {\n        console.log(\"dragging element\");\n        dragPieceElement(draggable);\n    }\n}\n// func for swapping between home and game pages\nfunction swap() {\n    console.log(\"swapping\");\n    let gameDiv = document.getElementById(\"gameDiv\");\n    let homeDiv = document.getElementById(\"homeDiv\");\n    console.log(`${gameDiv}`);\n    // mandatory error handling by ts\n    if (!homeDiv || !gameDiv) {\n        console.error(\"No divs founds\");\n        return;\n    }\n    if (homeDiv.getAttribute(\"class\") == \"centered\" && gameDiv.getAttribute(\"class\") == \"destroy\") {\n        homeDiv.setAttribute(\"class\", \"destroy\");\n        gameDiv.setAttribute(\"class\", \"block\");\n    }\n    else {\n        homeDiv.setAttribute(\"class\", \"centered\");\n        gameDiv.setAttribute(\"class\", \"destroy\");\n    }\n}\n// func for dragging pieces\n// uses ts event handling no libraries needed\nfunction dragPieceElement(element) {\n    var initialSquare;\n    var initialPos;\n    if (!element) {\n        // error here \n        console.error(`Unable to retrieve element <${element}>`);\n        return;\n    }\n    element.onmousedown = startDrag;\n    function setInitialSquare(square) {\n        initialSquare = square;\n    }\n    function setInitialPosition(pos) {\n        initialPos = pos;\n    }\n    // triggered by onmousedown\n    function startDrag(e) {\n        if (!element) {\n            console.error(\"trying to move non existent element\");\n            return;\n        }\n        // cache initial position and square in case needed to return there\n        var elemRect = element.getBoundingClientRect();\n        setInitialPosition([elemRect.left, elemRect.top]);\n        e.preventDefault();\n        document.onmouseup = stopDrag;\n        document.onmousemove = elementDrag;\n        return true;\n    }\n    // triggered when moving\n    function elementDrag(ev) {\n        ev.preventDefault();\n        if (element) {\n            // elemenet midpoint binds to cursor position\n            element.style.top = (ev.clientY - (element.offsetHeight / 2)) + \"px\";\n            element.style.left = (ev.clientX - (element.offsetWidth / 2)) + \"px\";\n            return true;\n        }\n        console.error(\"Element has been clicked dragged and disappeared\");\n        return false;\n    }\n    // triggered by on mouse up\n    function stopDrag(ev) {\n        snapToBoard([ev.clientX, ev.clientY]);\n        document.onmouseup = null;\n        document.onmousemove = null;\n        return true;\n    }\n    // takes position of element relative to the viewport and snaps it to the board element if element is over a valid square \n    function snapToBoard(position) {\n        if (!element) {\n            console.error(\"Unable to find elements in snapToBoard function\");\n            alert(\"something went wrong with the board see console for details\");\n            return;\n        }\n        var square = positionToSquare(position);\n        // check if piece can move there\n        if (!elemCanMove(initialSquare, square)) {\n            console.log(`returning to initial position: ${initialPos[0]},${initialPos[1]}`);\n            // return to intitial space \n            element.style.left = initialPos[0] + \"px\";\n            element.style.top = initialPos[1] + \"px\";\n            return;\n        }\n        // calculate pixel coords to move to\n        position = positionFromSquare(square);\n        console.log(`moving to pos: ${position[0]},${position[0]}`);\n        element.style.left = position[0] + \"px\";\n        element.style.top = position[1] + \"px\";\n        setInitialPosition(position);\n        setInitialSquare(square);\n    }\n    // validates if an element can move from a valid t  o square to a potentially invalid square\n    function elemCanMove(fromSquare, toSquare) {\n        // validate toSquare is on the board \n        var boardSquareLimit = toSquare[0] >= BOARDDIMENSION || toSquare[0] < 0 || toSquare[1] >= BOARDDIMENSION || toSquare[1] < 0;\n        var inCorners = toSquare[0] < 3 && (toSquare[1] < 3 || toSquare[1] > 10) ||\n            toSquare[0] > 10 && (toSquare[1] < 3 || toSquare[1] > 10);\n        if (boardSquareLimit || inCorners) {\n            return false;\n        }\n        return true;\n    }\n}\n// takes position of the element relative to viewport\nfunction positionToSquare(position) {\n    //TODO optimise this function to use global variables instead of recalculating\n    var boardElement = document.getElementById(\"boardImage\");\n    if (!boardElement) {\n        console.error(\"unable to find board element\");\n        return [-1, -1];\n    }\n    var boardRect = boardElement.getBoundingClientRect();\n    const squareLength = (boardRect.right - boardRect.left) / BOARDDIMENSION;\n    // make position relative to board\n    position[0] -= boardRect.left;\n    position[1] -= boardRect.top;\n    // remove position relative to the square \n    var square = [-1, -1];\n    square[0] = Math.floor(position[0] / squareLength);\n    square[1] = Math.floor(position[1] / squareLength);\n    return square;\n}\n// returns psoition relative to viewport\nfunction positionFromSquare(square) {\n    //TODO optimise this function to use global variables instead of recalculating\n    var boardElement = document.getElementById(\"boardImage\");\n    if (!boardElement) {\n        console.error(\"unable to find board element\");\n        return [-1, -1];\n    }\n    var boardRect = boardElement.getBoundingClientRect();\n    const squareLength = (boardRect.right - boardRect.left) / BOARDDIMENSION;\n    var position = [-1, -1];\n    position[0] = boardRect.left + square[0] * squareLength;\n    position[1] = boardRect.top + square[1] * squareLength;\n    return position;\n}\n// assume we have <div class=\"piece-br\"></div>\nfunction initBoard() {\n    const pieceClassNames = [\"bb\", \"bk\", \"bn\", \"bp\", \"bq\", \"br\", \"gb\", \"gk\", \"gn\", \"gp\", \"gq\", \"gr\", \"rb\", \"rk\", \"rn\", \"rp\", \"rq\", \"rr\", \"yb\", \"yk\", \"yn\", \"yp\", \"yq\", \"yr\"];\n    for (var i = 0; i < pieceClassNames.length; i++) {\n        var pieceName = pieceClassNames[i];\n        // gets indices of leftmost and downmost piece\n        console.log(`initialising piece: ${pieceName}`);\n        assignPieces(pieceName);\n    }\n}\nfunction calculatePieceColumn(pieceName) {\n    switch (pieceName[0]) {\n        case 'b': {\n            if (pieceName[1] == 'p') {\n                return 1;\n            }\n            return 0;\n        }\n        case 'g': {\n            if (pieceName[1] == 'p') {\n                return 12;\n            }\n            return 13;\n        }\n        case 'r': {\n            switch (pieceName[1]) {\n                case 'k': {\n                    return 7;\n                }\n                case 'q': {\n                    return 6;\n                }\n                case 'b': {\n                    return 5;\n                }\n                case 'n': {\n                    return 4;\n                }\n                default: {\n                    return 3;\n                }\n            }\n        }\n        default: {\n            switch (pieceName[1]) {\n                case 'k': {\n                    return 7;\n                }\n                case 'q': {\n                    return 6;\n                }\n                case 'b': {\n                    return 5;\n                }\n                case 'n': {\n                    return 4;\n                }\n                default: {\n                    return 3;\n                }\n            }\n        }\n    }\n}\nfunction calculatePieceRow(pieceName) {\n    switch (pieceName[0]) {\n        case 'r': {\n            if (pieceName[1] == 'p') {\n                return 1;\n            }\n            return 0;\n        }\n        case 'y': {\n            if (pieceName[1] == 'p') {\n                return 12;\n            }\n            return 13;\n        }\n        case 'b': {\n            switch (pieceName[1]) {\n                case 'k': {\n                    return 7;\n                }\n                case 'q': {\n                    return 6;\n                }\n                case 'b': {\n                    return 5;\n                }\n                case 'n': {\n                    return 4;\n                }\n                default: {\n                    return 3;\n                }\n            }\n        }\n        default: {\n            switch (pieceName[1]) {\n                case 'k': {\n                    return 7;\n                }\n                case 'q': {\n                    return 6;\n                }\n                case 'b': {\n                    return 5;\n                }\n                case 'n': {\n                    return 4;\n                }\n                default: {\n                    return 3;\n                }\n            }\n        }\n    }\n}\nfunction assignPieces(pieceName) {\n    var container = document.getElementById(\"pieceContainer\");\n    if (!container) {\n        console.error(\"contaienr not found\");\n        return;\n    }\n    var initCol = calculatePieceColumn(pieceName);\n    var initRow = calculatePieceRow(pieceName);\n    var className = \"piece-\" + pieceName;\n    var pieces = container.getElementsByClassName(className);\n    // always place the fist element\n    var first = pieces[0];\n    dragPieceElement(first);\n    console.log(initCol);\n    console.log(initRow);\n    var position = positionFromSquare([initCol, initRow]);\n    // cannot read properties of undefined (reading 'style') \n    first.style.left = position[0] + \"px\";\n    first.style.top = position[1] + \"px\";\n    var size = pieces.length;\n    var data = [\n        { name: 'p', offset: 1 },\n        { name: 'r', offset: 7 },\n        { name: 'n', offset: 5 },\n        { name: 'b', offset: 3 },\n    ];\n    if (className[0] == 'r' || className == 'y') {\n        // alter columns \n        for (var i = 1; i < size; i++) {\n            var element = pieces[i];\n            dragPieceElement(element);\n            let offset = 0;\n            data.forEach(function (data) {\n                if (data.name == className[1]) {\n                    offset = data.offset;\n                }\n            });\n            initCol += offset;\n            position = positionFromSquare([initCol, initRow]);\n            element.style.left = position[0] + \"px\";\n            element.style.top = position[1] + \"px\";\n        }\n    }\n    else {\n        for (var i = 1; i < size; i++) {\n            var element = pieces[i];\n            let offset = 0;\n            data.forEach(function (data) {\n                if (data.name == className[1]) {\n                    offset = data.offset;\n                }\n            });\n            initRow += offset;\n            position = positionFromSquare([initCol, initRow]);\n            element.style.left = position[0] + \"px\";\n            element.style.top = position[1] + \"px\";\n        }\n    }\n}\n\n\n//# sourceURL=webpack://4pchess/./src/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/index.js"](0, __webpack_exports__);
/******/ 	
/******/ })()
;